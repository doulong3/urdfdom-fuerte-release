From 96e56e353e85c604d455e4c9c97f280f87cb2883 Mon Sep 17 00:00:00 2001
From: William Woodall <wjwwood@gmail.com>
Date: Fri, 1 Feb 2013 01:48:59 -0800
Subject: [PATCH] Adding stack.xml and patches from src-deb

---
 CMakeLists.txt                                |    4 +-
 stack.xml                                     |   22 +++
 urdf_parser/CMakeLists.txt                    |    6 +-
 urdf_parser/include/urdf_parser/urdf_parser.h |   11 --
 urdf_parser/src/joint.cpp                     |  116 ---------------
 urdf_parser/src/link.cpp                      |  189 +------------------------
 urdf_parser/src/model.cpp                     |   26 ----
 urdf_parser/src/pose.cpp                      |   54 -------
 urdf_parser/src/twist.cpp                     |    2 +-
 9 files changed, 28 insertions(+), 402 deletions(-)
 create mode 100644 stack.xml

diff --git a/CMakeLists.txt b/CMakeLists.txt
index d6eb3bd..1d16c70 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -41,7 +41,7 @@ link_directories(${Boost_LIBRARY_DIRS})
 add_subdirectory(urdf_parser)
 
 set(PKG_NAME ${PROJECT_NAME})
-set(PKG_LIBRARIES urdfdom_sensor urdfdom_model_state urdfdom_model urdfdom_world)
+set(PKG_LIBRARIES urdfdom_sensor urdfdom_model_state urdfdom_model)
 set(PKG_DEPENDS urdfdom_headers console_bridge)
 set(cmake_conf_file "${CMAKE_CURRENT_SOURCE_DIR}/cmake/urdfdom-config.cmake")
 configure_file("${cmake_conf_file}.in" "${cmake_conf_file}" @ONLY)
@@ -51,7 +51,7 @@ install(FILES ${cmake_conf_file} DESTINATION share/${PROJECT_NAME}/cmake/ COMPON
 if (NOT MSVC)
   set(PKG_DESC "Unified Robot Description Format")
   set(PKG_DEPENDS "urdfdom_headers console_bridge") # make the list separated by spaces instead of ;
-  set(PKG_URDF_LIBS "-lurdfdom_sensor -lurdfdom_model_state -lurdfdom_model -lurdfdom_world")
+  set(PKG_URDF_LIBS "-lurdfdom_sensor -lurdfdom_model_state -lurdfdom_model")
   set(pkg_conf_file "${CMAKE_CURRENT_SOURCE_DIR}/cmake/pkgconfig/urdfdom.pc")
   configure_file("${pkg_conf_file}.in" "${pkg_conf_file}" @ONLY)
   install(FILES ${pkg_conf_file} DESTINATION lib/pkgconfig/ COMPONENT pkgconfig)
diff --git a/stack.xml b/stack.xml
new file mode 100644
index 0000000..0095098
--- /dev/null
+++ b/stack.xml
@@ -0,0 +1,22 @@
+<stack>
+  <name>urdfdom</name>
+  <version>0.2.2</version>
+  <description>urdfdom is a parser and interface for the URDF</description>
+  <author email="johnhsu@willowgarage.com">John Hsu</author>
+  <maintainer email="johnhsu@willowgarage.com">John Hsu</maintainer>
+  <license>BSD</license>
+  <copyright>Willow Garage</copyright>
+  <url>http://www.ros.org/wiki/urdf</url>
+
+  <build_depends>boost</build_depends>
+  <build_depends>cmake</build_depends>
+  <build_depends>pkg-config</build_depends>
+  <build_depends>tinyxml</build_depends>
+  <build_depends>urdfdom_headers</build_depends>
+  <build_depends>console_bridge</build_depends>
+
+  <depends>boost</depends>
+  <depends>tinyxml</depends>
+  <depends>urdfdom_headers</depends>
+  <depends>console_bridge</depends>
+</stack>
diff --git a/urdf_parser/CMakeLists.txt b/urdf_parser/CMakeLists.txt
index 97a41d7..32547fa 100644
--- a/urdf_parser/CMakeLists.txt
+++ b/urdf_parser/CMakeLists.txt
@@ -1,8 +1,5 @@
 include_directories(include)
 
-add_library(urdfdom_world SHARED src/pose.cpp src/model.cpp src/link.cpp src/joint.cpp src/world.cpp)
-target_link_libraries(urdfdom_world ${tinyxml_libraries} ${console_bridge_LIBRARIES} ${Boost_LIBRARIES})
-
 add_library(urdfdom_model SHARED src/pose.cpp src/model.cpp src/link.cpp src/joint.cpp)
 target_link_libraries(urdfdom_model ${tinyxml_libraries} ${console_bridge_LIBRARIES} ${Boost_LIBRARIES})
 
@@ -15,7 +12,7 @@ target_link_libraries(urdfdom_model_state ${tinyxml_libraries} ${console_bridge_
 # --------------------------------
 
 add_executable(check_urdf src/check_urdf.cpp)
-target_link_libraries(check_urdf urdfdom_model urdfdom_world)
+target_link_libraries(check_urdf urdfdom_model)
 
 add_executable(urdf_to_graphiz src/urdf_to_graphiz.cpp)
 target_link_libraries(urdf_to_graphiz urdfdom_model)
@@ -25,7 +22,6 @@ target_link_libraries(mem_test urdfdom_model)
 
 
 INSTALL(TARGETS urdfdom_model DESTINATION lib/)
-INSTALL(TARGETS urdfdom_world DESTINATION lib/)
 INSTALL(TARGETS check_urdf urdf_to_graphiz mem_test DESTINATION share/urdfdom_model)
 INSTALL(TARGETS urdfdom_sensor DESTINATION lib/)
 INSTALL(TARGETS urdfdom_model_state DESTINATION lib/)
diff --git a/urdf_parser/include/urdf_parser/urdf_parser.h b/urdf_parser/include/urdf_parser/urdf_parser.h
index 3f6454f..57f269f 100644
--- a/urdf_parser/include/urdf_parser/urdf_parser.h
+++ b/urdf_parser/include/urdf_parser/urdf_parser.h
@@ -42,22 +42,11 @@
 #include <tinyxml.h>
 #include <boost/function.hpp>
 #include <urdf_model/model.h>
-#include <urdf_model/color.h>
 
-namespace urdf_export_helpers {
-
-std::string values2str(unsigned int count, const double *values, double (*conv)(double) = NULL);
-std::string values2str(urdf::Vector3 vec);
-std::string values2str(urdf::Rotation rot);
-std::string values2str(urdf::Color c);
-std::string values2str(double d);
-
-}
 
 namespace urdf{
 
   boost::shared_ptr<ModelInterface> parseURDF(const std::string &xml_string);
-  TiXmlDocument*  exportURDF(boost::shared_ptr<ModelInterface> &model);
 
 }
 
diff --git a/urdf_parser/src/joint.cpp b/urdf_parser/src/joint.cpp
index b95d564..e54b283 100644
--- a/urdf_parser/src/joint.cpp
+++ b/urdf_parser/src/joint.cpp
@@ -39,7 +39,6 @@
 #include <boost/lexical_cast.hpp>
 #include <console_bridge/console.h>
 #include <tinyxml.h>
-#include <urdf_parser/urdf_parser.h>
 
 namespace urdf{
 
@@ -563,120 +562,5 @@ bool parseJoint(Joint &joint, TiXmlElement* config)
 }
 
 
-/* exports */
-bool exportPose(Pose &pose, TiXmlElement* xml);
-
-bool exportJointDynamics(JointDynamics &jd, TiXmlElement* xml)
-{
-  TiXmlElement *dynamics_xml = new TiXmlElement("dynamics");
-  dynamics_xml->SetAttribute("damping", urdf_export_helpers::values2str(jd.damping) );
-  dynamics_xml->SetAttribute("friction", urdf_export_helpers::values2str(jd.friction) );
-  xml->LinkEndChild(dynamics_xml);
-  return true;
-}
-
-bool exportJointLimits(JointLimits &jl, TiXmlElement* xml)
-{
-  TiXmlElement *limit_xml = new TiXmlElement("limit");
-  limit_xml->SetAttribute("effort", urdf_export_helpers::values2str(jl.effort) );
-  limit_xml->SetAttribute("velocity", urdf_export_helpers::values2str(jl.velocity) );
-  limit_xml->SetAttribute("lower", urdf_export_helpers::values2str(jl.lower) );
-  limit_xml->SetAttribute("upper", urdf_export_helpers::values2str(jl.upper) );
-  xml->LinkEndChild(limit_xml);
-  return true;
-}
-
-bool exportJointSafety(JointSafety &js, TiXmlElement* xml)
-{
-  TiXmlElement *safety_xml = new TiXmlElement("safety_controller");
-  safety_xml->SetAttribute("k_position", urdf_export_helpers::values2str(js.k_position) );
-  safety_xml->SetAttribute("k_velocity", urdf_export_helpers::values2str(js.k_velocity) );
-  safety_xml->SetAttribute("soft_lower_limit", urdf_export_helpers::values2str(js.soft_lower_limit) );
-  safety_xml->SetAttribute("soft_upper_limit", urdf_export_helpers::values2str(js.soft_upper_limit) );
-  xml->LinkEndChild(safety_xml);
-  return true;
-}
-
-bool exportJointCalibration(JointCalibration &jc, TiXmlElement* xml)
-{
-  if (jc.falling || jc.rising)
-  {
-    TiXmlElement *calibration_xml = new TiXmlElement("calibration");
-    if (jc.falling)
-      calibration_xml->SetAttribute("falling", urdf_export_helpers::values2str(*jc.falling) );
-    if (jc.rising)
-      calibration_xml->SetAttribute("rising", urdf_export_helpers::values2str(*jc.rising) );
-    //calibration_xml->SetAttribute("reference_position", urdf_export_helpers::values2str(jc.reference_position) );
-    xml->LinkEndChild(calibration_xml);
-  }
-  return true;
-}
-
-bool exportJointMimic(JointMimic &jm, TiXmlElement* xml)
-{
-  if (!jm.joint_name.empty())
-  {
-    TiXmlElement *mimic_xml = new TiXmlElement("mimic");
-    mimic_xml->SetAttribute("offset", urdf_export_helpers::values2str(jm.offset) );
-    mimic_xml->SetAttribute("multiplier", urdf_export_helpers::values2str(jm.multiplier) );
-    mimic_xml->SetAttribute("joint", jm.joint_name );
-    xml->LinkEndChild(mimic_xml);
-  }
-  return true;
-}
-
-bool exportJoint(Joint &joint, TiXmlElement* xml)
-{
-  TiXmlElement * joint_xml = new TiXmlElement("joint");
-  joint_xml->SetAttribute("name", joint.name);
-  if (joint.type == urdf::Joint::PLANAR)
-    joint_xml->SetAttribute("type", "planar");
-  else if (joint.type == urdf::Joint::FLOATING)
-    joint_xml->SetAttribute("type", "floating");
-  else if (joint.type == urdf::Joint::REVOLUTE)
-    joint_xml->SetAttribute("type", "revolute");
-  else if (joint.type == urdf::Joint::CONTINUOUS)
-    joint_xml->SetAttribute("type", "continuous");
-  else if (joint.type == urdf::Joint::PRISMATIC)
-    joint_xml->SetAttribute("type", "prismatic");
-  else if (joint.type == urdf::Joint::FIXED)
-    joint_xml->SetAttribute("type", "fixed");
-  else
-    logError("ERROR:  Joint [%s] type [%d] is not a defined type.\n",joint.name.c_str(), joint.type);
-
-  // origin
-  exportPose(joint.parent_to_joint_origin_transform, joint_xml);
-
-  // axis
-  TiXmlElement * axis_xml = new TiXmlElement("axis");
-  axis_xml->SetAttribute("xyz", urdf_export_helpers::values2str(joint.axis));
-  joint_xml->LinkEndChild(axis_xml);
-
-  // parent 
-  TiXmlElement * parent_xml = new TiXmlElement("parent");
-  parent_xml->SetAttribute("link", joint.parent_link_name);
-  joint_xml->LinkEndChild(parent_xml);
-
-  // child
-  TiXmlElement * child_xml = new TiXmlElement("child");
-  child_xml->SetAttribute("link", joint.child_link_name);
-  joint_xml->LinkEndChild(child_xml);
-
-  if (joint.dynamics)
-    exportJointDynamics(*(joint.dynamics), joint_xml);
-  if (joint.limits)
-    exportJointLimits(*(joint.limits), joint_xml);
-  if (joint.safety)
-    exportJointSafety(*(joint.safety), joint_xml);
-  if (joint.calibration)
-    exportJointCalibration(*(joint.calibration), joint_xml);
-  if (joint.mimic)
-    exportJointMimic(*(joint.mimic), joint_xml);
-
-  xml->LinkEndChild(joint_xml);
-  return true;
-}
-
-
 
 }
diff --git a/urdf_parser/src/link.cpp b/urdf_parser/src/link.cpp
index ca62606..4c24194 100644
--- a/urdf_parser/src/link.cpp
+++ b/urdf_parser/src/link.cpp
@@ -35,7 +35,6 @@
 /* Author: Wim Meeussen */
 
 
-#include <urdf_parser/urdf_parser.h>
 #include <urdf_model/link.h>
 #include <fstream>
 #include <sstream>
@@ -373,9 +372,8 @@ bool parseVisual(Visual &vis, TiXmlElement *config)
     vis.material.reset(new Material());
     if (!parseMaterial(*vis.material, mat))
     {
-      //vis.material.reset();
-      //return false;
-      logDebug("material has only name, actual material definition may be in the model");
+      vis.material.reset();
+      return false;
     }
   }
   
@@ -546,187 +544,4 @@ bool parseLink(Link &link, TiXmlElement* config)
   }
 }
 
-/* exports */
-bool exportPose(Pose &pose, TiXmlElement* xml);
-
-bool exportMaterial(Material &material, TiXmlElement *xml)
-{
-  TiXmlElement *material_xml = new TiXmlElement("material");
-  material_xml->SetAttribute("name", material.name);
-
-  TiXmlElement* texture = new TiXmlElement("texture");
-  if (!material.texture_filename.empty())
-    texture->SetAttribute("filename", material.texture_filename);
-  material_xml->LinkEndChild(texture);
-
-  TiXmlElement* color = new TiXmlElement("color");
-  color->SetAttribute("rgba", urdf_export_helpers::values2str(material.color));
-  material_xml->LinkEndChild(color);
-  xml->LinkEndChild(material_xml);
-  return true;
-}
-
-bool exportSphere(Sphere &s, TiXmlElement *xml)
-{
-  // e.g. add <sphere radius="1"/>
-  TiXmlElement *sphere_xml = new TiXmlElement("sphere");
-  sphere_xml->SetAttribute("radius", urdf_export_helpers::values2str(s.radius));
-  xml->LinkEndChild(sphere_xml);
-  return true;
-}
-
-bool exportBox(Box &b, TiXmlElement *xml)
-{
-  // e.g. add <box size="1 1 1"/>
-  TiXmlElement *box_xml = new TiXmlElement("box");
-  box_xml->SetAttribute("size", urdf_export_helpers::values2str(b.dim));
-  xml->LinkEndChild(box_xml);
-  return true;
-}
-
-bool exportCylinder(Cylinder &y, TiXmlElement *xml)
-{
-  // e.g. add <cylinder radius="1"/>
-  TiXmlElement *cylinder_xml = new TiXmlElement("cylinder");
-  cylinder_xml->SetAttribute("radius", urdf_export_helpers::values2str(y.radius));
-  cylinder_xml->SetAttribute("length", urdf_export_helpers::values2str(y.length));
-  xml->LinkEndChild(cylinder_xml);
-  return true;
-}
-
-bool exportMesh(Mesh &m, TiXmlElement *xml)
-{
-  // e.g. add <mesh filename="my_file" scale="1 1 1"/>
-  TiXmlElement *mesh_xml = new TiXmlElement("mesh");
-  if (!m.filename.empty())
-    mesh_xml->SetAttribute("filename", m.filename);
-  mesh_xml->SetAttribute("scale", urdf_export_helpers::values2str(m.scale));
-  xml->LinkEndChild(mesh_xml);
-  return true;
-}
-
-bool exportGeometry(boost::shared_ptr<Geometry> &geom, TiXmlElement *xml)
-{
-  TiXmlElement *geometry_xml = new TiXmlElement("geometry");
-  if (boost::dynamic_pointer_cast<Sphere>(geom))
-  {
-    exportSphere((*(boost::dynamic_pointer_cast<Sphere>(geom).get())), geometry_xml);
-  }
-  else if (boost::dynamic_pointer_cast<Box>(geom))
-  {
-    exportBox((*(boost::dynamic_pointer_cast<Box>(geom).get())), geometry_xml);
-  }
-  else if (boost::dynamic_pointer_cast<Cylinder>(geom))
-  {
-    exportCylinder((*(boost::dynamic_pointer_cast<Cylinder>(geom).get())), geometry_xml);
-  }
-  else if (boost::dynamic_pointer_cast<Mesh>(geom))
-  {
-    exportMesh((*(boost::dynamic_pointer_cast<Mesh>(geom).get())), geometry_xml);
-  }
-  else
-  {
-    logError("geometry not specified, I'll make one up for you!");
-    Sphere *s = new Sphere();
-    s->radius = 0.03;
-    geom.reset(s);
-    exportSphere((*(boost::dynamic_pointer_cast<Sphere>(geom).get())), geometry_xml);
-  }
-
-  xml->LinkEndChild(geometry_xml);
-  return true;
-}
-
-bool exportInertial(Inertial &i, TiXmlElement *xml)
-{
-  // adds <inertial>
-  //        <mass value="1"/>
-  //        <pose xyz="0 0 0" rpy="0 0 0"/>
-  //        <inertia ixx="1" ixy="0" />
-  //      </inertial>
-  TiXmlElement *inertial_xml = new TiXmlElement("inertial");
-
-  TiXmlElement *mass_xml = new TiXmlElement("mass");
-  mass_xml->SetAttribute("value", urdf_export_helpers::values2str(i.mass));
-  inertial_xml->LinkEndChild(mass_xml);
-
-  exportPose(i.origin, inertial_xml);
-
-  TiXmlElement *inertia_xml = new TiXmlElement("inertia");
-  inertia_xml->SetAttribute("ixx", urdf_export_helpers::values2str(i.ixx));
-  inertia_xml->SetAttribute("ixy", urdf_export_helpers::values2str(i.ixy));
-  inertia_xml->SetAttribute("ixz", urdf_export_helpers::values2str(i.ixz));
-  inertia_xml->SetAttribute("iyy", urdf_export_helpers::values2str(i.iyy));
-  inertia_xml->SetAttribute("iyz", urdf_export_helpers::values2str(i.iyz));
-  inertia_xml->SetAttribute("izz", urdf_export_helpers::values2str(i.izz));
-  inertial_xml->LinkEndChild(inertia_xml);
-
-  xml->LinkEndChild(inertial_xml);
-  
-  return true;
-}
-
-bool exportVisual(Visual &vis, TiXmlElement *xml)
-{
-  // <visual group="default">
-  //   <origin rpy="0 0 0" xyz="0 0 0"/>
-  //   <geometry>
-  //     <mesh filename="mesh.dae"/>
-  //   </geometry>
-  //   <material name="Grey"/>
-  // </visual>
-  TiXmlElement * visual_xml = new TiXmlElement("visual");
-
-  exportPose(vis.origin, visual_xml);
-
-  exportGeometry(vis.geometry, visual_xml);
-
-  if (vis.material)
-    exportMaterial(*vis.material, visual_xml);
-
-  if (!vis.group_name.empty())
-    visual_xml->SetAttribute("group", vis.group_name);
-
-  xml->LinkEndChild(visual_xml);
-
-  return true;
-}
-
-bool exportCollision(Collision &col, TiXmlElement* xml)
-{  
-  // <collision group="default">
-  //   <origin rpy="0 0 0" xyz="0 0 0"/>
-  //   <geometry>
-  //     <mesh filename="mesh.dae"/>
-  //   </geometry>
-  //   <material name="Grey"/>
-  // </collision>
-  TiXmlElement * collision_xml = new TiXmlElement("collision");
-
-  exportPose(col.origin, collision_xml);
-
-  exportGeometry(col.geometry, collision_xml);
-
-  if (!col.group_name.empty())
-    collision_xml->SetAttribute("group", col.group_name);
-
-  xml->LinkEndChild(collision_xml);
-
-  return true;
-}
-
-bool exportLink(Link &link, TiXmlElement* xml)
-{
-  TiXmlElement * link_xml = new TiXmlElement("link");
-  link_xml->SetAttribute("name", link.name);
-
-  exportInertial(*link.inertial, link_xml);
-  exportVisual(*link.visual, link_xml);
-  exportCollision(*link.collision, link_xml);
-
-  xml->LinkEndChild(link_xml);
-
-  return true;
-}
-
 }
diff --git a/urdf_parser/src/model.cpp b/urdf_parser/src/model.cpp
index 3138c5d..afe71cc 100644
--- a/urdf_parser/src/model.cpp
+++ b/urdf_parser/src/model.cpp
@@ -47,8 +47,6 @@ bool parseJoint(Joint &joint, TiXmlElement *config);
 
 boost::shared_ptr<ModelInterface>  parseURDF(const std::string &xml_string)
 {
-  console_bridge::setLogLevel(console_bridge::LOG_INFO);
-
   boost::shared_ptr<ModelInterface> model(new ModelInterface);
   model->clear();
 
@@ -223,29 +221,5 @@ boost::shared_ptr<ModelInterface>  parseURDF(const std::string &xml_string)
   return model;
 }
 
-bool exportMaterial(Material &material, TiXmlElement *config);
-bool exportLink(Link &link, TiXmlElement *config);
-bool exportJoint(Joint &joint, TiXmlElement *config);
-TiXmlDocument*  exportURDF(boost::shared_ptr<ModelInterface> &model)
-{
-  TiXmlDocument *doc = new TiXmlDocument();
-
-  TiXmlElement *robot = new TiXmlElement("robot");
-  robot->SetAttribute("name", model->name_);
-  doc->LinkEndChild(robot);
-
-  for (std::map<std::string, boost::shared_ptr<Link> >::const_iterator l=model->links_.begin(); l!=model->links_.end(); l++)  
-    exportLink(*(l->second), robot);
-
-  for (std::map<std::string, boost::shared_ptr<Joint> >::const_iterator j=model->joints_.begin(); j!=model->joints_.end(); j++)  
-  {
-    logDebug("exporting joint [%s]\n",j->second->name.c_str());
-    exportJoint(*(j->second), robot);
-  }
-
-  return doc;
-}
-
-
 }
 
diff --git a/urdf_parser/src/pose.cpp b/urdf_parser/src/pose.cpp
index 2ef0eea..266cc5b 100644
--- a/urdf_parser/src/pose.cpp
+++ b/urdf_parser/src/pose.cpp
@@ -42,49 +42,6 @@
 #include <algorithm>
 #include <console_bridge/console.h>
 #include <tinyxml.h>
-#include <urdf_parser/urdf_parser.h>
-
-namespace urdf_export_helpers {
-
-std::string values2str(unsigned int count, const double *values, double (*conv)(double))
-{
-    std::stringstream ss;
-    for (unsigned int i = 0 ; i < count ; i++)
-    {
-        if (i > 0)
-            ss << " ";
-        ss << (conv ? conv(values[i]) : values[i]);
-    }
-    return ss.str();
-}
-std::string values2str(urdf::Vector3 vec)
-{
-    double xyz[3];
-    xyz[0] = vec.x;
-    xyz[1] = vec.y;
-    xyz[2] = vec.z;
-    return values2str(3, xyz);
-}
-std::string values2str(urdf::Rotation rot)
-{
-    double rpy[3];
-    rot.getRPY(rpy[0], rpy[1], rpy[2]);
-    return values2str(3, rpy);
-}
-std::string values2str(urdf::Color c)
-{
-    double rgba[4];
-    rgba[0] = c.r;
-    rgba[1] = c.g;
-    rgba[2] = c.b;
-    rgba[3] = c.a;
-    return values2str(4, rgba);
-}
-std::string values2str(double d)
-{
-    return values2str(1, &d);
-}
-}
 
 namespace urdf{
 
@@ -120,17 +77,6 @@ bool parsePose(Pose &pose, TiXmlElement* xml)
   return true;
 }
 
-bool exportPose(Pose &pose, TiXmlElement* xml)
-{
-  TiXmlElement *origin = new TiXmlElement("origin");
-  std::string pose_xyz_str = urdf_export_helpers::values2str(pose.position);
-  std::string pose_rpy_str = urdf_export_helpers::values2str(pose.rotation);
-  origin->SetAttribute("xyz", pose_xyz_str);
-  origin->SetAttribute("rpy", pose_rpy_str);
-  xml->LinkEndChild(origin);
-  return true;
-}
-
 }
 
 
diff --git a/urdf_parser/src/twist.cpp b/urdf_parser/src/twist.cpp
index 2117825..74f90ae 100644
--- a/urdf_parser/src/twist.cpp
+++ b/urdf_parser/src/twist.cpp
@@ -35,7 +35,7 @@
 /* Author: John Hsu */
 
 
-#include <urdf_model/twist.h>
+#include <urdf_model_state/twist.h>
 #include <fstream>
 #include <sstream>
 #include <boost/lexical_cast.hpp>
-- 
1.7.10.2 (Apple Git-33)

